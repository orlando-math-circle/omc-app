__NUXT_JSONP__("/workshop/day1", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW){return {data:[{document:{slug:"day1",description:"Lectures and exercises completed during day 1 of the workshop.",title:"Day 1",category:"Workshop",version:1,toc:[{id:ab,depth:K,text:ac},{id:ad,depth:K,text:ae},{id:af,depth:K,text:L},{id:ag,depth:y,text:M},{id:ah,depth:y,text:N},{id:ai,depth:y,text:O},{id:aj,depth:K,text:ak},{id:al,depth:y,text:M},{id:am,depth:y,text:N},{id:an,depth:y,text:O},{id:ao,depth:y,text:ap}],body:{type:"root",children:[{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:P,props:{id:ab},children:[{type:b,tag:l,props:{href:"#lecture"},children:[{type:a,value:ac}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"View the presentation given during day 1 of the workshop "},{type:b,tag:l,props:{href:"..\u002Fdownloads\u002FDay 1 Presentation.pdf"},children:[{type:a,value:w}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:P,props:{id:ad},children:[{type:b,tag:l,props:{href:"#css-flexbox-practice"},children:[{type:a,value:ae}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:l,props:{href:"https:\u002F\u002Fflexboxfroggy.com\u002F",rel:[C,D,E],target:F},children:[{type:a,value:"Flexbox Froggy"}]},{type:a,value:" is an interactive game that helps familiarize players with CSS's Flexible Box Module, known as flexbox, a responsive layout model that allows elements in a container to automatically adjust dependent on screen size. The game challenges players through 24 levels, teaching them how to justify and align content along with ordering and wrapping items."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:aq,props:{},children:[]},{type:a,value:ar},{type:b,tag:x,props:{src:"\u002Fomc-app\u002Fimages\u002Fworkshop\u002Fflexbox-froggy.gif"},children:[]},{type:a,value:ar},{type:b,tag:aq,props:{},children:[]}]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:"Click here to view the answer to Level 24 if you get stumped"}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#pond {\n    display: flex;\n    flex-direction: column-reverse;\n    flex-wrap: wrap-reverse;\n    justify-content: center;\n    align-content: space-between;\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:P,props:{id:af},children:[{type:b,tag:l,props:{href:"#color-guesser-game"},children:[{type:a,value:L}]}]},{type:a,value:c},{type:b,tag:G,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Objective: Students will build a color guessing game by generating random colors and manipulating DOM elements."}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{src:"\u002Fomc-app\u002Fimages\u002Fworkshop\u002Ffull-game.gif"},children:[]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:A,props:{id:ag},children:[{type:b,tag:l,props:{href:"#html-structure"},children:[{type:a,value:M}]}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"To complete our game, we will be working with header elements for the text, div elements to help with styling, and button elements for our color buttons and reset game button. We will be incorporating both "},{type:b,tag:d,props:{},children:[{type:a,value:as}]},{type:a,value:H},{type:b,tag:d,props:{},children:[{type:a,value:"class"}]},{type:a,value:" attributes to assist with styling and implementing functionality with JavaScript. Note that "},{type:b,tag:d,props:{},children:[{type:a,value:as}]},{type:a,value:" attributes must be unique to an element. Review and copy the following code into the HTML box in your JSFiddle environment:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cbody\u003E\n\u003Ch1\u003EGuess the color!\u003C\u002Fh1\u003E\n\u003Ch2 id=\"colorValue\"\u003E\u003C\u002Fh2\u003E\n\u003Cdiv id=\"buttonWrapper\"\u003E\n    \u003Cbutton class=\"colorButton\"\u003E\u003C\u002Fbutton\u003E\n    \u003Cbutton class=\"colorButton\"\u003E\u003C\u002Fbutton\u003E\n    \u003Cbutton class=\"colorButton\"\u003E\u003C\u002Fbutton\u003E\n    \u003Cbutton class=\"colorButton\"\u003E\u003C\u002Fbutton\u003E\n    \u003Cbutton class=\"colorButton\"\u003E\u003C\u002Fbutton\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch2 id=\"answer\"\u003E\u003C\u002Fh2\u003E\n\u003Cdiv id=\"reset\"\u003E\n    \u003Cbutton id=\"resetButton\"\u003EReset Game\u003C\u002Fbutton\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fbody\u003E\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Click "},{type:b,tag:d,props:{},children:[{type:a,value:U}]},{type:a,value:" at the top of the page to see the HTML code displayed in the Result box. The output should look like the following image."}]},{type:a,value:B},{type:b,tag:x,props:{src:"\u002Fomc-app\u002Fimages\u002Fworkshop\u002Finitial-output.png"},children:[]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:A,props:{id:ah},children:[{type:b,tag:l,props:{href:"#css-styling"},children:[{type:a,value:N}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:at},{type:b,tag:t,props:{to:"\u002Fworkshop\u002Fday1#full-css-code"},children:[{type:a,value:w}]},{type:a,value:au}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Recall that the CSS structure is as follows"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{style:av,src:"\u002Fomc-app\u002Fimages\u002Fworkshop\u002Fcss-syntax.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:aw}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"body {\n    font-family: Verdana;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Run the code and watch the font change! Any declarations written within this selector will be applied to every HTML element within the "},{type:b,tag:d,props:{},children:[{type:a,value:ax}]},{type:a,value:" tag. Feel free to change the font to something other than Verdana, such as Arial or Helvetica."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Next we will align our text elements and apply some spacing by setting the margins by adding the following lines of code:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"h1 {\n    text-align: center;\n}\n\n#answer {\n    margin: 10px auto;\n    text-align: center;\n}\n\n#reset {\n    margin: 0 auto;\n    text-align: center;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:ay},{type:b,tag:d,props:{},children:[{type:a,value:"auto"}]},{type:a,value:" value in the margin property that you see automatically sets the right and left margin of the element to fill the parent container, ultimately centering the element. Note that the "},{type:b,tag:d,props:{},children:[{type:a,value:"h1"}]},{type:a,value:" selector applies styles to all "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Ch1\u003E"}]},{type:a,value:" elements. The "},{type:b,tag:d,props:{},children:[{type:a,value:"#answer"}]},{type:a,value:" selector applies styles to our header element in our HTML code that we gave the attribute of "},{type:b,tag:d,props:{},children:[{type:a,value:"id=\"answer\""}]},{type:a,value:" to and the "},{type:b,tag:d,props:{},children:[{type:a,value:"#reset"}]},{type:a,value:" selector applies styles to the div element we gave the attribute of "},{type:b,tag:d,props:{},children:[{type:a,value:"id=\"reset\""}]},{type:a,value:" to."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now we will adjust the styling of the colored buttons! Add in the following lines of code:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#buttonWrapper {\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    margin: 0 auto;\n}\n\n.colorButton {\n    background-color: rgb(255, 0, 0);\n    width: 50px;\n    height: 50px;\n    border: none;\n    border-radius: 50%;\n    box-shadow: 0 1px 10px lightgrey;\n    margin: 15px;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"You'll notice a lot of styles are applied here. The container that holds the colored buttons is represented by the HTML div element with the "},{type:b,tag:d,props:{},children:[{type:a,value:"id=\"buttonWrapper\""}]},{type:a,value:" attribute. The declaration "},{type:b,tag:d,props:{},children:[{type:a,value:"display: flex"}]},{type:a,value:" is a useful CSS trick to enable websites to be responsive (the content displayed adjusts depending on the screen size) and mobile-friendly. Within the "},{type:b,tag:d,props:{},children:[{type:a,value:".colorButton"}]},{type:a,value:" selector, the width and height of each button are defined in pixels and "},{type:b,tag:d,props:{},children:[{type:a,value:"border-radius: 50%"}]},{type:a,value:" changes the button's shape to a circle. The "},{type:b,tag:d,props:{},children:[{type:a,value:"box-shadow"}]},{type:a,value:" property adds a subtle shadow to each button. After clicking "},{type:b,tag:d,props:{},children:[{type:a,value:U}]},{type:a,value:", all 5 circled buttons should be the color red as we defined the default color to be an rgb value of (255, 0, 0)."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Lastly, we will style our reset button and text that will display an RGB value."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#resetButton {\n    padding: 10px;\n    background: black;\n    border-radius: 30px;\n    margin: 10px;\n    box-shadow: 0 1px 10px lightgrey;\n    color: white;\n}\n\n#colorValue {\n    margin: 10px auto;\n    text-align: center;\n    box-shadow: 0 1px 10px lightgrey;\n    width: fit-content;\n    padding: 10px;\n    border-radius: 15px;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The styles applied are quite simple and similar to the ones before. We changed the background of the button to black, the text color to white, rounded its edges, and applied some padding to all 4 sides so the text won't be right up against the button's borders. We will not see the changes for the styling in the "},{type:b,tag:d,props:{},children:[{type:a,value:"#colorValue"}]},{type:a,value:" selector as its content will be defined in our JavaScript code later on."}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"All our styling is now complete! 🥳 The output should look similar to the image below. Students are welcome to adjust styles as desired. The given code was just a good starting point for students to work with common CSS properties and to allow the game to not appear so dull."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{src:"\u002Fomc-app\u002Fimages\u002Fworkshop\u002Fcss-output.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:u,props:{id:"full-css-code"},children:[{type:b,tag:l,props:{href:"#full-css-code"},children:[{type:a,value:az}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:aA}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"body {\n    font-family: Verdana;\n}\n\nh1 {\n    text-align: center;\n}\n\n#answer {\n    margin: 10px auto;\n    text-align: center;\n}\n\n#reset {\n    margin: 0 auto;\n    text-align: center;\n}\n\n#buttonWrapper {\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    margin: 0 auto;\n}\n\n.colorButton {\n    background-color: rgb(255, 0, 0);\n    width: 50px;\n    height: 50px;\n    border: none;\n    border-radius: 50%;\n    box-shadow: 0 1px 10px lightgrey;\n    margin: 15px;\n}\n\n#resetButton {\n    padding: 10px;\n    background: black;\n    border-radius: 30px;\n    margin: 10px;\n    box-shadow: 0 1px 10px lightgrey;\n    color: white;\n}\n\n#colorValue {\n    margin: 10px auto;\n    text-align: center;\n    box-shadow: 0 1px 10px lightgrey;\n    width: fit-content;\n    padding: 10px;\n    border-radius: 15px;\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:A,props:{id:ai},children:[{type:b,tag:l,props:{href:"#implementing-functionality-with-javascript"},children:[{type:a,value:O}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"In order for our game to work, we need to add some JavaScript code that will generate random color values and bring functionality to our buttons. Start with a quick "},{type:b,tag:t,props:{to:"\u002Fworkshop\u002Fday1#rgb-review"},children:[{type:a,value:aB}]},{type:a,value:", jump straight to the "},{type:b,tag:t,props:{to:"\u002Fworkshop\u002Fday1#javascript-tutorial"},children:[{type:a,value:"JavaScript tutorial"}]},{type:a,value:", or view the full JavaScript code "},{type:b,tag:t,props:{to:"\u002Fworkshop\u002Fday1#full-javascript-code"},children:[{type:a,value:w}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:u,props:{id:"rgb-review"},children:[{type:b,tag:l,props:{href:"#rgb-review"},children:[{type:a,value:aB}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"First, a quick review on RGB values. RGB in CSS represents a color based on its red, green, and blue components. Each parameter in an rgb(red, green, blue) function is represented by an integer between 0 and 255 or percentage between 0% and 100%."}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:b,tag:"table",props:{},children:[{type:b,tag:"thead",props:{},children:[{type:b,tag:v,props:{},children:[{type:b,tag:aC,props:{},children:[{type:a,value:"RGB Value"}]},{type:b,tag:aC,props:{},children:[{type:a,value:"Resulting Color"}]}]}]},{type:b,tag:"tbody",props:{},children:[{type:b,tag:v,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"(255, 0, 0)"}]},{type:b,tag:o,props:{},children:[{type:b,tag:q,props:{style:"color: rgb(255, 0, 0)"},children:[{type:a,value:"red"}]}]}]},{type:b,tag:v,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"(0, 255, 0)"}]},{type:b,tag:o,props:{},children:[{type:b,tag:q,props:{style:"color: rgb(0, 255, 0)"},children:[{type:a,value:"green"}]}]}]},{type:b,tag:v,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"(0, 0, 255)"}]},{type:b,tag:o,props:{},children:[{type:b,tag:q,props:{style:"color: rgb(0, 0, 255)"},children:[{type:a,value:"blue"}]}]}]},{type:b,tag:v,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"(255, 255, 0)"}]},{type:b,tag:o,props:{},children:[{type:b,tag:q,props:{style:"color: rgb(255, 255, 0)"},children:[{type:a,value:"yellow"}]}]}]},{type:b,tag:v,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"(255, 0, 255)"}]},{type:b,tag:o,props:{},children:[{type:b,tag:q,props:{style:"color: rgb(255, 0, 255)"},children:[{type:a,value:"magenta"}]}]}]},{type:b,tag:v,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"(0, 255, 255)"}]},{type:b,tag:o,props:{},children:[{type:b,tag:q,props:{style:"color: rgb(0, 255, 255)"},children:[{type:a,value:"cyan"}]}]}]},{type:b,tag:v,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"(255, 255, 255)"}]},{type:b,tag:o,props:{},children:[{type:b,tag:q,props:{style:"color: rgb(255, 255, 255)"},children:[{type:a,value:"white"}]}]}]},{type:b,tag:v,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:"(0, 0, 0)"}]},{type:b,tag:o,props:{},children:[{type:b,tag:q,props:{style:"color: rgb(0, 0, 0)"},children:[{type:a,value:"black"}]}]}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The following block of code would change an "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Ch2\u003E"}]},{type:a,value:" element's text color to "},{type:b,tag:q,props:{style:"color: rgb(212, 68, 120)"},children:[{type:a,value:aD}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"h2 {\n    color: rgb(212, 68, 120);\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"You may see CSS code that looks like the following and notice the appended 'a' and fourth parameter in the function. This 'a' stands for alpha and is represented by a number between 0.0 and 1.0 which sets the color's opacity. A value of 0 makes the color fully transparent and a value of 1 makes the color opaque. The code below uses the same RGB values but cuts the opacity down to 50%, resulting in "},{type:b,tag:q,props:{style:"color: rgba(212, 68, 120, 0.5)"},children:[{type:a,value:aD}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"h2 {\n    color: rgba(212, 68, 120, 0.5);\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"That covers the basic of RGB values. Keep these tips in mind when completing the JavaScript portion of the code and when playing the game at the end!"}]},{type:a,value:c},{type:b,tag:u,props:{id:"javascript-tutorial"},children:[{type:b,tag:l,props:{href:"#javascript-tutorial"},children:[{type:a,value:"JavaScript Tutorial"}]}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Firstly, we want to store our buttons in one place in our JavaScript code. As all 5 buttons have a class name of \"colorButton\", we can grab all 5 buttons at once and store them into an array, which is a special variable that contains a list of things. Add the following line of code to the designated JavaScript box in the JSFiddle environment:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var buttons = document.getElementsByClassName('colorButton');\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now we want to create variables to store the text element that displays the RGB value to be guessed and the text that displays whether we guessed the color correctly or not. Add the following code below our buttons variable:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var heading;\nheading = document.getElementById('colorValue');\n\nvar answerMessage = document.getElementById('answer');\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Next we will define a function that sets a button's color by passing in the button and specific RGB values. As we want to change the style of the button that is passed in, we utilize JavaScript's "},{type:b,tag:d,props:{},children:[{type:a,value:".setAttribute()"}]},{type:a,value:" method. Add the following code:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"function setButtonColor(button, red, green, blue) {\n    button.setAttribute('style',\n        'background-color: rgb('+ red +','+ green +','+ blue +');'\n    );\n};\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now we want to define a function that generates a random integer values between 0 and 255. Add the following code below the "},{type:b,tag:d,props:{},children:[{type:a,value:V}]},{type:a,value:aE}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"function generateValue() {\n    return Math.floor(Math.random() * 256);\n};\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Math.random generates a floating-point number between 0 and 1, where 0 is included but 1 is not. As we want to generate integers between 0 and 255, we multiply our random value by 256 to produce numbers between 0 and 256. "},{type:b,tag:d,props:{},children:[{type:a,value:"Math.floor"}]},{type:a,value:" takes a floating-point value and rounds it down to the nearest integer. Therefore, the combination of these two methods produces integer values between 0 and 255."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"At this point, our buttons are still not clickable and our colors are not being generated. We have defined variables and necessary functions but now we have to make it all work together. Add the following "},{type:b,tag:d,props:{},children:[{type:a,value:aF}]},{type:a,value:" function "},{type:b,tag:aG,props:{},children:[{type:a,value:"BEFORE"}]},{type:a,value:" the "},{type:b,tag:d,props:{},children:[{type:a,value:V}]},{type:a,value:aH}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"function startGame() {\n    answerMessage.innerHTML = \"\";\n\n    var answerButton = Math.round(Math.random() * (buttons.length - 1));\n\n    for ( var i = 0; i \u003C buttons.length; i++) {\n        var red = generateValue();\n        var green = generateValue();\n        var blue = generateValue();\n\n        setButtonColor(buttons[i], red, green, blue);\n\n        if (i === answerButton) {\n            heading.innerHTML = `(${red}, ${green}, ${blue})`;\n        }\n\n        buttons[i].addEventListener('click', function(){\n            if (this === buttons[answerButton]) {\n                answerMessage.innerHTML = \"Correct!\";\n            } else {\n                answerMessage.innerHTML = \"Wrong answer! Guess again!\";\n            }\n        });\n    }\n};\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This code is the core of our functionality and can be overwhelming to beginning developers, especially those who do not have experience with programming language basics, so we will go line-by-line to explain what is happening."}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The following code resets the answer message to an empty string every time the game is restarted. This ensures a message is not displayed when the user has yet to click on a button upon the start of a game."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"answerMessage.innerHTML = \"\";\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Below we create a variable for the index for the button that will hold the correct color value. Similar to how we generated a random color value, we generate a random integer to choose which button will hold the correct color value. We use "},{type:b,tag:d,props:{},children:[{type:a,value:"buttons.length"}]},{type:a,value:", which is 5 in this case, to set our integer bounds. Note that a random integer between 0 and 4, not 1 and 5, will be generated. This is because we access elements in an array through an index that starts at 0 and ends at the number of items in the array minus 1."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var answerButton = Math.floor(Math.random() * buttons.length);\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This "},{type:b,tag:d,props:{},children:[{type:a,value:W}]},{type:a,value:" loop simplifies the process of generating random RGB values for each of our buttons. The index is represented by "},{type:b,tag:d,props:{},children:[{type:a,value:aI}]},{type:a,value:" and is initialized to 0 ("},{type:b,tag:d,props:{},children:[{type:a,value:"var i = 0"}]},{type:a,value:"). After completion of the code within the loop, the index will increment by 1 ("},{type:b,tag:d,props:{},children:[{type:a,value:"i++"}]},{type:a,value:"). The loop will continue to execute until the index is no longer less than the number of buttons, ("},{type:b,tag:d,props:{},children:[{type:a,value:"i \u003C buttons.length"}]},{type:a,value:")."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"for ( var i = 0; i \u003C buttons.length; i++) {\n    ...\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"We create three variables (red, green, and blue) to call our "},{type:b,tag:d,props:{},children:[{type:a,value:"generateValue()"}]},{type:a,value:" function and store the returned value."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var red = generateValue();\nvar green = generateValue();\nvar blue = generateValue();\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This line of code calls the "},{type:b,tag:d,props:{},children:[{type:a,value:V}]},{type:a,value:" function, passing in the button at the current index and the randomly generated RGB values just created."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"setButtonColor(buttons[i], red, green, blue);\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"We use a conditional statement to check if the current index is equal to the index for the correct button. If we are at the right index, we set the heading variable to the red, green, and blue values created a few lines of code ago. Note that backticks instead of apostrophes in combination with the "},{type:b,tag:d,props:{},children:[{type:a,value:"${variable}"}]},{type:a,value:" structure are used to display variable values in a string."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"if (i === answerButton) {\n    heading.innerHTML = `(${red}, ${green}, ${blue})`;\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This portion of the code is a little bit more complicated than the rest. We add an event listener, which is a procedure in JavaScript that waits for an event to occur, to the button at the current index, specifying that it will be a click event and defining a function that will be performed when the button is clicked. An if-else conditional is used to determine if the button that was clicked is the answer button. As the event listener stays with the button after the code is executed, "},{type:b,tag:d,props:{},children:[{type:a,value:aJ}]},{type:a,value:" will refer to the clicked button. If the user selected the right button, the text displayed will indicate they've guessed correctly. Otherwise, they are told they've selected the wrong button and are prompted to guess again."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"buttons[i].addEventListener('click', function(){\n    if (this === buttons[answerButton]) {\n        answerMessage.innerHTML = \"Correct!\";\n    } else {\n        answerMessage.innerHTML = \"Wrong answer! Guess again!\";\n    }\n});\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"At this point, most of our functionality is complete. You can run the code and click the buttons to see the changes in action. Add the function call below to the bottom of the box and click "},{type:b,tag:d,props:{},children:[{type:a,value:U}]},{type:a,value:" to see the random colors and buttons in action."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"startGame();\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"All we need to do now is add functionality to our reset button to reset the game. We simply retrieve the reset button through its ID attribute and add a click event listener that calls the "},{type:b,tag:d,props:{},children:[{type:a,value:aF}]},{type:a,value:" function when the button is clicked. Add the following line of code to the bottom of the box and run!"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"document.getElementById('resetButton').addEventListener('click', startGame);\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:u,props:{id:"full-javascript-code"},children:[{type:b,tag:l,props:{href:"#full-javascript-code"},children:[{type:a,value:aK}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:aL}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var buttons = document.getElementsByClassName('colorButton');\n\nvar heading;\nheading = document.getElementById('colorValue');\n\nvar answerMessage = document.getElementById('answer');\n\nfunction startGame() {\n  answerMessage.innerHTML = \"\";\n\n  var answerButton = Math.round(Math.random() * (buttons.length - 1));\n\n  for (var i = 0; i \u003C buttons.length; i++) {\n    var red = generateValue();\n    var green = generateValue();\n    var blue = generateValue();\n\n    setButtonColor(buttons[i], red, green, blue);\n\n    if (i === answerButton) {\n      heading.innerHTML = `(${red}, ${green}, ${blue})`;\n    }\n\n    buttons[i].addEventListener('click', function() {\n      if (this === buttons[answerButton]) {\n        answerMessage.innerHTML = \"Correct!\";\n      } else {\n        answerMessage.innerHTML = \"Wrong answer! Guess again!\";\n      }\n    });\n  }\n};\n\nfunction setButtonColor(button, red, green, blue) {\n  button.setAttribute('style',\n    'background-color: rgb(' + red + ',' + green + ',' + blue + ');'\n  );\n};\n\nfunction generateValue() {\n  return Math.floor(Math.random() * 256);\n};\n\nstartGame();\ndocument.getElementById('resetButton').addEventListener('click', startGame);\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:X,props:{type:Y},children:[{type:a,value:"\n    The code is now complete! Use your knowledge of RGB values to play the game! 😁\n"}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:G,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"A JSFiddle with the completed code can be viewed "},{type:b,tag:l,props:{href:"https:\u002F\u002Fjsfiddle.net\u002F7cw2e8xn\u002F40\u002F",rel:[C,D,E],target:F},children:[{type:a,value:w}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:P,props:{id:aj},children:[{type:b,tag:l,props:{href:"#simple-to-do-list"},children:[{type:a,value:ak}]}]},{type:a,value:c},{type:b,tag:G,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Objective: Students will construct a practical to-do list where they can add items to the list, mark items as completed, as well as empty the list or and clear completed items from the list."}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{src:"\u002Fomc-app\u002Fimages\u002Fworkshop\u002Ftodo-list.gif"},children:[]},{type:a,value:" \n"},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:A,props:{id:al},children:[{type:b,tag:l,props:{href:"#html-structure-1"},children:[{type:a,value:M}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Copy the following code into the HTML box in your JSFiddle environment:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cbody\u003E\n  \u003Cdiv class=\"container\"\u003E\n    \u003Ch2\u003EMy To-Do List\u003C\u002Fh2\u003E\n    \u003Cp\u003EDouble-click an item to mark it complete.\u003C\u002Fp\u003E\n    \u003Cform name=\"adder\"\u003E\n      \u003Cinput type=\"text\" id=\"input-box\" \u002F\u003E\n    \u003C\u002Fform\u003E\n    \u003Cbutton id=\"add-button\"\u003EAdd\u003C\u002Fbutton\u003E\n    \u003Cbr \u002F\u003E\n    \u003Col id=\"list\"\u003E\n    \u003C\u002Fol\u003E\n    \u003Cdiv id=\"button-wrapper\"\u003E\n      \u003Cbutton id=\"clear-button\"\u003EClear Completed\u003C\u002Fbutton\u003E\n      \u003Cbutton id=\"empty-button\"\u003EEmpty List\u003C\u002Fbutton\u003E\n    \u003C\u002Fdiv\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fbody\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"You'll notice the use of "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cdiv\u003E"}]},{type:a,value:", "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cheader\u003E"}]},{type:a,value:", and "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cbutton\u003E"}]},{type:a,value:" elements like those used for the "},{type:b,tag:t,props:{to:aM},children:[{type:a,value:L}]},{type:a,value:" and some new elements. The "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cp\u003E"}]},{type:a,value:" tag represents a paragraph element. A "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cform\u003E"}]},{type:a,value:" is needed in order to use an "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cinput\u003E"}]},{type:a,value:" element of "},{type:b,tag:d,props:{},children:[{type:a,value:"type=\"text\""}]},{type:a,value:" so we can type text to be added to our to-do list. A "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cbr \u002F\u003E"}]},{type:a,value:" is a simple line break and "},{type:b,tag:d,props:{},children:[{type:a,value:aN}]},{type:a,value:" represents an ordered list, which will be further expanded on later. The output should currently look like the following image."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{style:av,src:"\u002Fomc-app\u002Fimages\u002Fworkshop\u002Flist-html.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:A,props:{id:am},children:[{type:b,tag:l,props:{href:"#css-styling-1"},children:[{type:a,value:N}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:at},{type:b,tag:t,props:{to:"\u002Fworkshop\u002Fday1#full-css-code-1"},children:[{type:a,value:w}]},{type:a,value:au}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:aw}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"body {\n    background: rgb(143,246,255);\n    background: linear-gradient(90deg, rgba(143,246,255,1) 0%, rgba(186,252,213,1) 100%);\n    font-family: \"Helvetica Neue\";\n}\n\n.container {\n    width: 80%;\n    margin-top: 50px;\n    background-color: #fff;\n    border-radius: 15px;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 30px;\n    font-weight: 300;\n    box-shadow: 0 1px 10px lightgrey;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"We apply a gradient background color behind our container and set the font to all text within the "},{type:b,tag:d,props:{},children:[{type:a,value:ax}]},{type:a,value:" tag. We then style the main container, defining its width, margins, background color, padding, and box shadow along with rounding its edges and setting the font weight for all text within the "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Ccontainer\u003E"}]},{type:a,value:" tag."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now add the following styles:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"h2 {\n    margin: 0;\n}\n\np {\n    font-style: italic;\n    color: #666;\n    margin: 5px 0;\n}\n\nol {\n    margin: 20px 0;\n}\n\nol li {\n    margin: 5px 0;\n    padding: 3px;\n    user-select: none;\n    transition: all 0.5s ease-out;\n}\n\n.completed {\n    text-decoration: line-through;\n    color: #666;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This code makes small margin changes to text elements, italicizes the text within the paragraph element, and adds styles to elements that will not be seen until JavaScript functionality is implemented in a bit."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Add the following code to the CSS box:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"button {\n    margin: 10px 2px;\n    padding: 5px 20px;\n    border-radius: 15px;\n    background-color: #0093D5;\n    border: none;\n    color: #fff;\n    text-align: center;\n    display: inline-block;\n    font-size: small;\n}\n\nbutton:hover {\n    cursor: pointer;\n    opacity: 0.75;\n}\n\ninput {\n    padding: 3px 6px;\n}\n\nform {\n    display: inline-block;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"You are probably familiar with most of the styles applied here. The addition of "},{type:b,tag:d,props:{},children:[{type:a,value:":hover"}]},{type:a,value:" to the "},{type:b,tag:d,props:{},children:[{type:a,value:"button"}]},{type:a,value:" selector allows us to apply styling when the user is hovering their mouse over a button. In this case, if we hover over a button, our cursor will change to a pointer and the button's opacity decreases to 75%."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"You know the drill, add this last bit of code to the bottom of the box:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#button-wrapper {\n    text-align: center;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n}\n\n#clear-button {\n    background-color: #49B749;\n}\n\n#empty-button {\n    background-color: #9B1C20;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This code uses flexbox to arrange our buttons and changes their colors. Note that the selectors are based on the respective ID attributes."}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"All our styling is now complete! 🥳 The output should look similar to the image below. Students are welcome to adjust styles as desired. The given code was just a good starting point for students to work with common CSS properties and to allow the list to not appear so dull."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{src:"\u002Fomc-app\u002Fimages\u002Fworkshop\u002Flist-css.png"},children:[]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:u,props:{id:"full-css-code-1"},children:[{type:b,tag:l,props:{href:"#full-css-code-1"},children:[{type:a,value:az}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:aA}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"body {\n    background: rgb(143,246,255);\n    background: linear-gradient(90deg, rgba(143,246,255,1) 0%, rgba(186,252,213,1) 100%);\n    font-family: \"Helvetica Neue\";\n}\n\n.container {\n    width: 80%;\n    margin-top: 50px;\n    background-color: #fff;\n    border-radius: 15px;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 30px;\n    font-weight: 300;\n    box-shadow: 0 1px 10px lightgrey;\n}\n\nh2 {\n    margin: 0;\n}\n\np {\n    font-style: italic;\n    color: #666;\n    margin: 5px 0;\n}\n\nol {\n    margin: 20px 0;\n}\n\nol li {\n    margin: 5px 0;\n    padding: 3px;\n    user-select: none;\n    transition: all 0.5s ease-out;\n}\n\n.completed {\n    text-decoration: line-through;\n    color: #666;\n}\n\nbutton {\n    margin: 10px 2px;\n    padding: 5px 20px;\n    border-radius: 15px;\n    background-color: #0093D5;\n    border: none;\n    color: #fff;\n    text-align: center;\n    display: inline-block;\n    font-size: small;\n}\n\nbutton:hover {\n    cursor: pointer;\n    opacity: 0.75;\n}\n\ninput {\n    padding: 3px 6px;\n}\n\nform {\n    display: inline-block;\n}\n\n#button-wrapper {\n    text-align: center;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n}\n\n#clear-button {\n    background-color: #49B749;\n}\n\n#empty-button {\n    background-color: #9B1C20;\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:A,props:{id:an},children:[{type:b,tag:l,props:{href:"#implementing-functionality-with-javascript-1"},children:[{type:a,value:O}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"As you can see in the Result box, there are 3 distinct buttons that we need to add functionality to:"}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:Z,props:{style:_},children:[{type:a,value:"\nAdd\n"}]},{type:a,value:"\n - Adds new items to the to-do list\n"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:Z,props:{style:_},children:[{type:a,value:"\nClear Completed\n"}]},{type:a,value:"\n - Removes items marked as completed from the list\n"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:Z,props:{style:_},children:[{type:a,value:"\nEmpty List\n"}]},{type:a,value:"\n - Empties the entire list\n"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Note that the JavaScript code for this exercise is a bit more complex than code used in the "},{type:b,tag:t,props:{to:aM},children:[{type:a,value:L}]},{type:a,value:". Feel free to revisit the "},{type:b,tag:t,props:{to:"\u002Fvolunteers\u002Fwebdev#javascript"},children:[{type:a,value:"JavaScript Crash Course"}]},{type:a,value:" section if you need more time to prepare. Click "},{type:b,tag:t,props:{to:"\u002Fworkshop\u002Fday1#full-javascript-code-1"},children:[{type:a,value:w}]},{type:a,value:" if you need to jump to the full JavaScript code."}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"First we will retrieve our buttons and define their appropriate functions. Starting with the "},{type:b,tag:d,props:{},children:[{type:a,value:Q}]},{type:a,value:" button, add the following code to the designated JavaScript box in your environment:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var addButton = document.getElementById(\"add-button\");\naddButton.addEventListener(\"click\", addItem);\n\nfunction addItem() {\n    alert(\"You clicked the add button!\");\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"By now you should recognize that we are able to get the "},{type:b,tag:d,props:{},children:[{type:a,value:Q}]},{type:a,value:" button through its unique ID attribute we set in the HTML code. After storing the button as a variable, we attach an event listener to the button that will trigger the "},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:" function when clicked. If you run the code and click the "},{type:b,tag:d,props:{},children:[{type:a,value:Q}]},{type:a,value:" button, an alert will pop up notifying you that you clicked the button, as that is the only code defined in the "},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:" function so far."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now use your JavaScript knowledge to get the "},{type:b,tag:d,props:{},children:[{type:a,value:aO}]},{type:a,value:H},{type:b,tag:d,props:{},children:[{type:a,value:$}]},{type:a,value:" buttons through their ID attributes, attach event listeners to both, and define functions for each with a simple alert similar to what was done for the "},{type:b,tag:d,props:{},children:[{type:a,value:Q}]},{type:a,value:" button. For the variable names, use "},{type:b,tag:d,props:{},children:[{type:a,value:"clearButton"}]},{type:a,value:H},{type:b,tag:d,props:{},children:[{type:a,value:"emptyButton"}]},{type:a,value:", respectively. For the function names, use "},{type:b,tag:d,props:{},children:[{type:a,value:aP}]},{type:a,value:H},{type:b,tag:d,props:{},children:[{type:a,value:aQ}]},{type:a,value:", respectively."}]},{type:a,value:B},{type:b,tag:r,props:{},children:[{type:a,value:B},{type:b,tag:s,props:{},children:[{type:a,value:R}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var clearButton = document.getElementById(\"clear-button\");\nclearButton.addEventListener(\"click\", clearCompletedItems);\n\nfunction clearCompletedItems() {\n    alert(\"You clicked the clear button!\");\n}\n\nvar emptyButton = document.getElementById(\"empty-button\");\nemptyButton.addEventListener(\"click\", emptyList);\n\nfunction emptyList() {\n    alert(\"You clicked the empty button!\");\n}\n"}]}]}]},{type:a,value:B}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"We will now focus on the functionality behind adding items to the to-do list. You may have noticed the "},{type:b,tag:d,props:{},children:[{type:a,value:aN}]},{type:a,value:" tag in the HTML code, which represents an ordered list. Ordered lists are numbered while unordered lists, represented by "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cul\u003E"}]},{type:a,value:", are not. Each item in this ordered list will need a "},{type:b,tag:d,props:{},children:[{type:a,value:aR}]},{type:a,value:" tag, which we will create in our JavaScript code."}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"First, create variables for both the input box and the list itself with the following code:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var inputBox = document.getElementById(\"input-box\");\nvar list = document.getElementById(\"list\");\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now add the following function that creates a new to-do list item:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"function newItem(itemText) {\n    var item = document.createElement(\"li\");\n    var text = document.createTextNode(itemText);\n    item.appendChild(text);\n\n    list.appendChild(item);\n    item.addEventListener(\"dblclick\", toggleItemState);\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This function..."}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"creates a new "},{type:b,tag:d,props:{},children:[{type:a,value:aR}]},{type:a,value:" element and stores it in a variable called "},{type:b,tag:d,props:{},children:[{type:a,value:"item"}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"creates a text node with the text passed in and stores it in a variable called "},{type:b,tag:d,props:{},children:[{type:a,value:a}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"appends the text node to the item"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"appends the item to the main list"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"binds an event listener to the item that triggers the "},{type:b,tag:d,props:{},children:[{type:a,value:aS}]},{type:a,value:" function (which will be created shortly) when "},{type:b,tag:aG,props:{},children:[{type:a,value:"double"}]},{type:a,value:" clicked"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Return to the "},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:" function and replace the placeholder alert with:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var itemText = inputBox.value;\nnewItem(itemText);\n\ninputBox.value = \"\";\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:ay},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:" function is now complete. It creates a new variable to store the text that was entered into the input box and then calls and passes such text to the "},{type:b,tag:d,props:{},children:[{type:a,value:aa}]},{type:a,value:" function that was created a step before. After the item is created, the input box's text value is set to an empty string to allow for reset after each item addition. Run the code and add items to the list to see the changes in action!"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"In order to mark items as complete, we need to define the "},{type:b,tag:d,props:{},children:[{type:a,value:aS}]},{type:a,value:" function referenced earlier. Add the following code to the file:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"function toggleItemState() {\n    if (this.classList.contains(\"completed\")) {\n        this.classList.remove(\"completed\");\n    } else {\n        this.classList.add(\"completed\");\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"You may have wondered why the HTML code does not contain any elements with "},{type:b,tag:d,props:{},children:[{type:a,value:"class=\"completed\""}]},{type:a,value:" but the CSS code consists of a "},{type:b,tag:d,props:{},children:[{type:a,value:".completed"}]},{type:a,value:" selector and declarations. This function answers that question. As we have attached event listeners to each item in the list, the "},{type:b,tag:"em",props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:aJ}]}]},{type:a,value:" keyword is used to access the specific item that was double clicked. The "},{type:b,tag:d,props:{},children:[{type:a,value:"if-else"}]},{type:a,value:" conditional statement states that if the accessed item contains the "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" class, the function removes it from its class list. Otherwise, the function adds the "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" class to the list of classes for the item. In a UI perspective, if the item is already marked as completed, unmark it and remove the styling. If the item is not marked as completed, mark it and add the strikethrough text styling. Run the code, add new items to the list, and try double clicking your items!"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The next tasks are to remove items from the list that are marked as completed and completely empty the list."}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"To remove completed items from the to-do list, replace the alert inside your "},{type:b,tag:d,props:{},children:[{type:a,value:aP}]},{type:a,value:aT}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var completedItems = list.getElementsByClassName(\"completed\");\n\nwhile (completedItems.length \u003E 0) {\n    completedItems.item(0).remove();\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This code creates a variable to store every item in the list that is marked as completed (aka items that have the "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" class) and loops over these items to individually remove them until the list of completed items is empty, given by the "},{type:b,tag:d,props:{},children:[{type:a,value:aU}]},{type:a,value:" loop's condition of "},{type:b,tag:d,props:{},children:[{type:a,value:"completedItems.length \u003E 0"}]},{type:a,value:". Remember that the index of items in a list\u002Farray starts at 0, not 1, and therefore the first item of the list is removed every time the loop is executed. Yet again, run the code, add items to the list, mark a few as completed, and then click the "},{type:b,tag:d,props:{},children:[{type:a,value:aO}]},{type:a,value:" button to see all completed items disappear from the list!"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"To completely empty the list, replace the alert inside your "},{type:b,tag:d,props:{},children:[{type:a,value:aQ}]},{type:a,value:aT}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var items = list.children;\n\nwhile (items.length \u003E 0) {\n    items.item(0).remove();\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This code is extremely similar to the code used to clear completed items from the list. The only difference is that instead of looping through items marked as completed, the function loops through every item in the to-do list, made possible by storing the list's children (every list item within the ordered list) in a new variable called "},{type:b,tag:d,props:{},children:[{type:a,value:"items"}]},{type:a,value:". The "},{type:b,tag:d,props:{},children:[{type:a,value:aU}]},{type:a,value:" loop removes the first item in this list until there are no items left to remove (when "},{type:b,tag:d,props:{},children:[{type:a,value:"items.length"}]},{type:a,value:" is no longer greater than 0). Run the code, add some items to the list, and click the "},{type:b,tag:d,props:{},children:[{type:a,value:$}]},{type:a,value:" button to see every item disappear from the list."}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:u,props:{id:"full-javascript-code-1"},children:[{type:b,tag:l,props:{href:"#full-javascript-code-1"},children:[{type:a,value:aK}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:aL}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var addButton = document.getElementById(\"add-button\");\naddButton.addEventListener(\"click\", addItem);\n\nfunction addItem() {\n  var itemText = inputBox.value;\n  newItem(itemText);\n\n  inputBox.value = \"\";\n}\n\nvar clearButton = document.getElementById(\"clear-button\");\nclearButton.addEventListener(\"click\", clearCompletedItems);\n\nfunction clearCompletedItems() {\n  var completedItems = list.getElementsByClassName(\"completed\");\n\n  while (completedItems.length \u003E 0) {\n    completedItems.item(0).remove();\n  }\n}\n\nvar emptyButton = document.getElementById(\"empty-button\");\nemptyButton.addEventListener(\"click\", emptyList);\n\nfunction emptyList() {\n  var items = list.children;\n\n  while (items.length \u003E 0) {\n    items.item(0).remove();\n  }\n}\n\nvar inputBox = document.getElementById(\"input-box\");\nvar list = document.getElementById(\"list\");\n\nfunction newItem(itemText) {\n  var item = document.createElement(\"li\");\n  var text = document.createTextNode(itemText);\n  item.appendChild(text);\n\n  list.appendChild(item);\n  item.addEventListener(\"dblclick\", toggleItemState);\n}\n\nfunction toggleItemState() {\n  if (this.classList.contains(\"completed\")) {\n    this.classList.remove(\"completed\");\n  } else {\n    this.classList.add(\"completed\");\n  }\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:X,props:{type:Y},children:[{type:a,value:"\n    The to-do list now has all of its functionality complete! 🎉 Students are welcome to stop the exercise here and mess around with adding, completing, and removing items from the list. However, for students interested in further challenging themselves with this exercise, you now have the opportunity to learn about saving information to your browser through the addition of a `Save List` button.\n"}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:G,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"A JSFiddle with the completed code (up until this point) can be viewed "},{type:b,tag:l,props:{href:"https:\u002F\u002Fjsfiddle.net\u002ForL9f4my\u002F6\u002F",rel:[C,D,E],target:F},children:[{type:a,value:w}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:A,props:{id:ao},children:[{type:b,tag:l,props:{href:"#challenge---save-list"},children:[{type:a,value:ap}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"By adding a "},{type:b,tag:d,props:{},children:[{type:a,value:S}]},{type:a,value:" button and storing data in the browser, saved items will appear in the list the next time the user accesses their JSFiddle in the same browser."}]},{type:a,value:c},{type:b,tag:u,props:{id:"adjust-html-file"},children:[{type:b,tag:l,props:{href:"#adjust-html-file"},children:[{type:a,value:"Adjust HTML File"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Add a "},{type:b,tag:d,props:{},children:[{type:a,value:S}]},{type:a,value:" button below the "},{type:b,tag:d,props:{},children:[{type:a,value:$}]},{type:a,value:" button in your HTML code, using the ID attribute of "},{type:b,tag:d,props:{},children:[{type:a,value:"save-button"}]},{type:a,value:z}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:R}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cdiv id=\"button-wrapper\"\u003E\n    \u003Cbutton id=\"clear-button\"\u003EClear Completed\u003C\u002Fbutton\u003E\n    \u003Cbutton id=\"empty-button\"\u003EEmpty List\u003C\u002Fbutton\u003E\n    \u003Cbutton id=\"save-button\"\u003ESave List\u003C\u002Fbutton\u003E\n\u003C\u002Fdiv\u003E\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:u,props:{id:"add-css-styling"},children:[{type:b,tag:l,props:{href:"#add-css-styling"},children:[{type:a,value:"Add CSS Styling"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Change the background color of the "},{type:b,tag:d,props:{},children:[{type:a,value:S}]},{type:a,value:" button. You are welcome to use any color through this simple "},{type:b,tag:l,props:{href:"https:\u002F\u002Fg.co\u002Fkgs\u002FR6tnzS",rel:[C,D,E],target:F},children:[{type:a,value:"Color Picker"}]},{type:a,value:" but if you do not want to pick a color, feel free to use "},{type:b,tag:d,props:{},children:[{type:a,value:"#594EED"}]},{type:a,value:z}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:R}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"#save-button {\n  background-color: #594EED;\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:u,props:{id:"implement-javascript-code"},children:[{type:b,tag:l,props:{href:"#implement-javascript-code"},children:[{type:a,value:"Implement JavaScript Code"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now comes the brain stretching portion of the challenge. We will be working with arrays and objects to complete the task of saving our list. Note that arrays are lists of variables and objects are sets of properties and values."}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Before we begin creating new variables and functions, we need to modify some areas of our current code. The following changes allow for us to save completed items in a list by passing in a Boolean value (true or false) to the "},{type:b,tag:d,props:{},children:[{type:a,value:aa}]},{type:a,value:aH}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Within the "},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:" function, change"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"newItem(itemText)\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:aV}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"newItem(itemText, false)\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Change"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"function newItem(itemText)\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:aV}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"function newItem(itemText, completed)\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Add the following code between "},{type:b,tag:d,props:{},children:[{type:a,value:"item.appendChild(text)"}]},{type:a,value:H},{type:b,tag:d,props:{},children:[{type:a,value:"list.appendChild(item)"}]},{type:a,value:" in the "},{type:b,tag:d,props:{},children:[{type:a,value:aa}]},{type:a,value:aE}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"if (completed) {\n    item.classList.add(completed);\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Recall the process we went through to create functionality for each of our 3 buttons in the beginning of this exercise. Do the same to start the functionality for the "},{type:b,tag:d,props:{},children:[{type:a,value:S}]},{type:a,value:" button by adding code to the bottom of the JavaScript box."}]},{type:a,value:B},{type:b,tag:r,props:{},children:[{type:a,value:B},{type:b,tag:s,props:{},children:[{type:a,value:R}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var saveButton = document.getElementById(\"save-button\");\nsaveButton.addEventListener(\"click\", saveList);\n\nfunction saveList() {\n\n}\n"}]}]}]},{type:a,value:B}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Inside the "},{type:b,tag:d,props:{},children:[{type:a,value:"saveList()"}]},{type:a,value:" function, add the following code:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var toDos = [];\n\nfor (var i = 0; i \u003C list.children.length; i++) {\n    var toDo = list.children.item(i);\n\n    var toDoInfo = {\n        \"task\": toDo.innerText,\n        \"completed\": toDo.classList.contains(\"completed\")\n    };\n\n    toDos.push(toDoInfo);\n\n}\n\nlocalStorage.setItem(\"toDos\", JSON.stringify(toDos));\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"We will go line-by-line to explain what is happening with the code as it can be quite complex."}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Simply enough, we first create an empty array called "},{type:b,tag:d,props:{},children:[{type:a,value:T}]},{type:a,value:". The square brackets are what defines an array."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var toDos = [];\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"The following "},{type:b,tag:d,props:{},children:[{type:a,value:W}]},{type:a,value:" loop continues to loop until index "},{type:b,tag:d,props:{},children:[{type:a,value:aI}]},{type:a,value:" is greater than or equal to the number of items in the list, as seen by "},{type:b,tag:d,props:{},children:[{type:a,value:"i \u003C list.children.length"}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"for (var i = 0; i \u003C list.children.length; i++) {\n    ...\n}\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"A variable called "},{type:b,tag:d,props:{},children:[{type:a,value:"toDo"}]},{type:a,value:" is created to access the item in the list at the current index."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var toDo = list.children.item(i);\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"An object titled "},{type:b,tag:d,props:{},children:[{type:a,value:"toDoInfo"}]},{type:a,value:" is created. It consists of a "},{type:b,tag:d,props:{},children:[{type:a,value:"task"}]},{type:a,value:" property whose value is the item's text value and a "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" property whose value is a Boolean value determining if an item is marked as completed based on whether or not it contains the "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" class."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"var toDoInfo = {\n    \"task\": toDo.innerText,\n    \"completed\": toDo.classList.contains(\"completed\")\n};\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This newly created object is then added to the "},{type:b,tag:d,props:{},children:[{type:a,value:T}]},{type:a,value:" array through the "},{type:b,tag:d,props:{},children:[{type:a,value:"push"}]},{type:a,value:" method."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"toDos.push(toDoInfo);\n"}]}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Lastly, the following line of code stores the "},{type:b,tag:d,props:{},children:[{type:a,value:T}]},{type:a,value:" array in the browser's local storage as an item. As data stored in a web server\u002Fbrowser must be a string, "},{type:b,tag:d,props:{},children:[{type:a,value:"JSON.stringify()"}]},{type:a,value:" converts a JavaScript object (or in this case, an array of objects) into a string."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"localStorage.setItem(\"toDos\", JSON.stringify(toDos));\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Now that we have saved the list, we need to add a function that loads the list to display our saved items."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"function loadList() {\n    if (localStorage.getItem(\"toDos\") != null) {\n        var toDos = JSON.parse(localStorage.getItem(\"toDos\"));\n\n        for (var i = 0; i \u003C toDos.length; i++) {\n            var toDo = toDos[i];\n            newItem(toDo.task, toDo.completed);\n        }\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"This function first checks if the "},{type:b,tag:d,props:{},children:[{type:a,value:T}]},{type:a,value:" item in our local storage is null (empty). If it is not null, the code inside the "},{type:b,tag:d,props:{},children:[{type:a,value:"if"}]},{type:a,value:" statement is executed. As we previously stringified our array of objects, we use "},{type:b,tag:d,props:{},children:[{type:a,value:"JSON.parse"}]},{type:a,value:" to convert the string back into our array so we can access its data. A "},{type:b,tag:d,props:{},children:[{type:a,value:W}]},{type:a,value:" loop is used to access each object in the array and create a new item in our to-do list based on the object's properties as described earlier."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Simply add the following function call to load the list upon page render to complete the challenge!"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"loadList();\n"}]}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:X,props:{type:Y},children:[{type:a,value:"\nThe challenge is now complete! 🥳🎉 After adding some items to your list, marking a few as complete, and clicking the `Save List` button...save your JSFiddle (don't worry, no account creation is necessary) and refresh your browser to see your saved items displayed in your list again!\n"}]},{type:a,value:c},{type:b,tag:f,props:{className:[m,n]},children:[{type:a,value:c},{type:b,tag:G,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"A JSFiddle with the completed code (including the save list feature) can be viewed "},{type:b,tag:l,props:{href:"https:\u002F\u002Fjsfiddle.net\u002Fysn9xak4\u002F3\u002F",rel:[C,D,E],target:F},children:[{type:a,value:w}]}]},{type:a,value:c}]},{type:a,value:c}]}]},dir:"\u002Fworkshop",path:"\u002Fworkshop\u002F23.day1",extension:".md",createdAt:aW,updatedAt:aW,position:"999900230000",to:"\u002Fworkshop\u002Fday1",language:"en",draft:false},prev:{slug:"intro",title:"Workshop Introduction",to:"\u002Fworkshop\u002Fintro"},next:{slug:"day2",title:"Day 2",to:"\u002Fworkshop\u002Fday2"}}],fetch:{},mutations:void 0}}("text","element","\n","code","p","div","nuxt-content-highlight","pre","language-text","line-numbers","li","a","prose","dark:prose-dark","td","ul","span","details","summary","nuxt-link","h4","tr","here","img",3,".","h3","\n  ","nofollow","noopener","noreferrer","_blank","blockquote"," and ","addItem()","completed",2,"Color Guesser Game","HTML Structure","CSS Styling","Implementing Functionality with JavaScript","h2","Add","Click here to check your work","Save List","toDos","Run","setButtonColor()","for","alert","info","badge","margin: 0","Empty List","newItem()","lecture","Lecture","css-flexbox-practice","CSS Flexbox Practice","color-guesser-game","html-structure","css-styling","implementing-functionality-with-javascript","simple-to-do-list","Simple To-Do List","html-structure-1","css-styling-1","implementing-functionality-with-javascript-1","challenge---save-list","CHALLENGE - Save List","br"," ","id","Now we will apply styles to our elements before implementing functionality. (Skip ahead to the full CSS code block "," if you do not wish to work step by step)","transform: 0.5","First copy the following code into the designated CSS box in the IDE:","\u003Cbody\u003E","The ","Full CSS Code","Click here to view all of the CSS code","RGB Review","th","this color"," function:","startGame()","strong"," function.","i","this","Full JavaScript Code","Click here to view all of the JavaScript code","\u002Fworkshop\u002Fday1#color-guesser-game","\u003Col\u003E","Clear Completed","clearCompletedItems()","emptyList()","\u003Cli\u003E","toggleItemState()"," function with the following code:","while","to","2021-07-29T19:10:45.252Z")));